"""remove starred change financial_id to string

Revision ID: 17ba496fb5ee
Revises: 2e30804e1994
Create Date: 2015-08-19 15:32:31.587407

"""

# revision identifiers, used by Alembic.
revision = '17ba496fb5ee'
down_revision = '2e30804e1994'

from alembic import op
import sqlalchemy as sa

index_set = [
    'tsv_contract_description',
    'tsv_company_name',
    'tsv_detail_value',
    'tsv_line_item_description'
]

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    # drop the search_view
    conn.execute(sa.sql.text('''
    DROP MATERIALIZED VIEW IF EXISTS search_view
    '''))

    op.drop_table('contract_starred_association')
    op.alter_column(u'contract', 'financial_id',
               existing_type=sa.Integer(),
               type_=sa.String(255),
               )

    # recreate our search view
    conn.execute(sa.sql.text('''
    CREATE MATERIALIZED VIEW search_view AS (
        SELECT DISTINCT
            c.id::VARCHAR || contract_property.id::VARCHAR || line_item.id::VARCHAR || company.id::VARCHAR AS id,
            c.id AS contract_id,
            company.id AS company_id,
            c.expiration_date, c.financial_id,
            c.description AS contract_description,
            to_tsvector(c.description) AS tsv_contract_description,
            company.company_name AS company_name,
            to_tsvector(company.company_name) AS tsv_company_name,
            contract_property.key AS detail_key,
            contract_property.value AS detail_value,
            to_tsvector(contract_property.value) AS tsv_detail_value,
            line_item.description AS line_item_description,
            to_tsvector(line_item.description) AS tsv_line_item_description
        FROM contract c
        LEFT OUTER JOIN contract_property ON c.id = contract_property.contract_id
        LEFT OUTER JOIN line_item ON c.id = line_item.contract_id
        LEFT OUTER JOIN company_contract_association ON c.id = company_contract_association.contract_id
        LEFT OUTER JOIN company ON company.id = company_contract_association.company_id
    )
    '''))

    op.create_index(op.f('ix_search_view_id'), 'search_view', ['id'], unique=True)

    # create remaining indices on the tsv columns
    for index in index_set:
        op.create_index(op.f(
            'ix_tsv_{}'.format(index)), 'search_view', [index], postgresql_using='gin'
        )
    ### end Alembic commands ###

def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    # drop the search_view
    conn.execute(sa.sql.text('''
    DROP MATERIALIZED VIEW IF EXISTS search_view
    '''))

    conn.execute(sa.sql.text(
    '''
    ALTER TABLE contract ALTER COLUMN financial_id TYPE integer USING (financial_id::integer);
    '''
    ))

    op.create_table('contract_starred_association',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contract_id'], [u'contract.id'], name=u'contract_starred_association_contract_id_fkey', ondelete=u'SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], [u'users.id'], name=u'contract_starred_association_user_id_fkey', ondelete=u'SET NULL')
    )

    # recreate our search view
    conn.execute(sa.sql.text('''
    CREATE MATERIALIZED VIEW search_view AS (
        SELECT
            c.id::VARCHAR || contract_property.id::VARCHAR || line_item.id::VARCHAR || company.id::VARCHAR AS id,
            c.id AS contract_id,
            company.id AS company_id,
            c.expiration_date, c.financial_id,
            c.description AS contract_description,
            to_tsvector(c.description) AS tsv_contract_description,
            company.company_name AS company_name,
            to_tsvector(company.company_name) AS tsv_company_name,
            contract_property.key AS detail_key,
            contract_property.value AS detail_value,
            to_tsvector(contract_property.value) AS tsv_detail_value,
            line_item.description AS line_item_description,
            to_tsvector(line_item.description) AS tsv_line_item_description
        FROM contract c
        LEFT OUTER JOIN contract_property ON c.id = contract_property.contract_id
        LEFT OUTER JOIN line_item ON c.id = line_item.contract_id
        LEFT OUTER JOIN company_contract_association ON c.id = company_contract_association.contract_id
        LEFT OUTER JOIN company ON company.id = company_contract_association.company_id
    )
    '''))

    # create unique index on ids
    op.create_index(op.f('ix_search_view_id'), 'search_view', ['id'], unique=True)

    # create remaining indices on the tsv columns
    for index in index_set:
        op.create_index(op.f(
            'ix_tsv_{}'.format(index)), 'search_view', [index], postgresql_using='gin'
        )

    ### end Alembic commands ###
